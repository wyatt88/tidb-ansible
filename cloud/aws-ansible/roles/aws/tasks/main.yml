---

- name: "AWS | Generate SSH Key"
  include: generate_key.yml

- name: "AWS | Import SSH Plubic Key to AWS"
  ec2_key:
    name: pingcap
    key_material: "{{ item }}"
    region: "{{ aws_region }}"
    state: present
  with_file: ~/.ssh/aws.id_rsa.pub

- name: "AWS | Get VPC CIDR Block"
  ec2_vpc_net_facts:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  register: net_facts
# existing cluster
- name: tidb cluster group
  ec2_group:
    state: present
    name: "ansible-sg-by-{{ managed_by }}"
    description: vpc security group by {{ creator }}
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 0
        to_port: 0
        group_name: "ansible-sg-by-{{ managed_by }}"
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: "{{ net_facts.vpcs[0].cidr_block }}"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4000
        to_port: 4000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8000
        to_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4567
        to_port: 4567
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9000
        to_port: 9050
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9090 # prometheus
        to_port: 9091   # pushgateway
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9200
        to_port: 9200
        cidr_ip: 0.0.0.0/0
    # outbound
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
    region: "{{ aws_region }}"
  register: security_group

- name: "AWS | Get AMI_ID in {{aws_region}}"
  ec2_ami_find:
    owner: "137112412989"
    region: "{{ aws_region }}"
    name: "amzn-ami-hvm-*-gp2"
    virtualization_type: hvm
    sort: creationDate
    sort_order: descending
    no_result_action: fail
  register: ami_info

- name: tikv servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ tikv_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 20
        delete_on_termination: true
      - device_name: "{{tikv_data_volume.device_name}}"
        volume_type: "{{tikv_data_volume.volume_type}}"
        ephemeral: "{{tikv_data_volume.ephemeral}}"
    instance_tags:
      Name: tikv-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: tikv
    count_tag:
      Type: tikv
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ tikv_count }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"

- name: pd servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ pd_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 20
        delete_on_termination: true
      - device_name: "{{pd_data_volume.device_name}}"
        volume_type: "{{pd_data_volume.volume_type}}"
        ephemeral: "{{pd_data_volume.ephemeral}}"
    instance_tags:
      Name: pd-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: pd
    count_tag:
      Type: pd
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ pd_count }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"

- name: tidb servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ tidb_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    instance_tags:
      Name: tidb-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: tidb
    count_tag:
      Type: tidb
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ tidb_count }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"

- name: monitoring servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ monitoring_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 20
        delete_on_termination: false
    instance_tags:
      Name: mon-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Role: bastion
      Type: monitoring
    count_tag:
      Type: monitoring
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ monitoring_count }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"

