---

# all cluster use a single vpc
- name: vpc setup
  ec2_vpc:
    state: present
    cidr_block: "{{ vpc_cidr_block }}"
    resource_tags:
      Name: pingcap-vpc-ansible
      ManagedBy: tidb-ansible
      Creator: ansible-auto
    subnets:
      - cidr: "{{vpc_octect}}.1.0/24" 
        az: "{{ aws_region }}a"
        resource_tags:
          Name: pingcap-subnet-1a
          Environment: "{{ environment }}"
          ManagedBy: tidb-ansible
          Creator: ansible-auto
          Tier: "db"
      - cidr: "{{vpc_octect}}.2.0/24" 
        az: "{{ aws_region }}b"
        resource_tags:
          Name: pingcap-subnet-1b
          Environment: "{{ environment }}"
          ManagedBy: tidb-ansible
          Creator: ansible-auto
          Tier: "db"
    internet_gateway: yes       # assign internet
    route_tables:
      - subnets:
          - "{{vpc_octect}}.1.0/24"
          - "{{vpc_octect}}.2.0/24" 
        routes:
          - dest: 0.0.0.0/0
            gw: igw
    region: "{{ aws_region }}"
  register: vpc

# existing cluster
- name: tidb cluster group
  ec2_group:
    state: present
    name: "ansible-sg-by-{{ managed_by }}"
    description: vpc security group by {{ creator }}
    vpc_id: "{{ vpc.vpc_id }}"
    rules:
      - proto: tcp
        from_port: 0
        to_port: 0
        group_name: "ansible-sg-by-{{ managed_by }}"
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4000
        to_port: 4000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8000
        to_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4567
        to_port: 4567
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9000
        to_port: 9050
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9090 # prometheus
        to_port: 9091   # pushgateway
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9200
        to_port: 9200
        cidr_ip: 0.0.0.0/0
    # outbound
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
    region: "{{ aws_region }}"
  register: security_group

- name: "AWS | Get AMI_ID in {{aws_region}}"
  ec2_ami_find:
    owner: "688023202711"
    region: "{{ aws_region }}"
    name: "dcos-centos7-*"
    virtualization_type: hvm
    sort: creationDate
    sort_order: descending
    no_result_action: fail
  register: ami_info

- name: tikv servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ tikv_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 20
        delete_on_termination: true
      - device_name: /dev/sdb
        volume_type: ephemeral
        ephemeral: ephemeral1
        volume_size: 20
    instance_tags:
      Name: tikv-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: tikv
    count_tag:
      Type: tikv
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ tikv_count }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes

- name: pd servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ pd_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    # count: "{{pd_count}}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 20
        delete_on_termination: true
      - device_name: /dev/sdb
        volume_type: ephemeral
        ephemeral: ephemeral1
        volume_size: 20
    instance_tags:
      Name: pd-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: pd
    count_tag:
      Type: pd
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ pd_count }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes

- name: tidb servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ tidb_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    # count: "{{ tidb_count }}"
    instance_tags:
      Name: tidb-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: tidb
    count_tag:
      Type: tidb
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ tidb_count }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes

- name: monitoring servers
  ec2:
    region: "{{ aws_region }}"
    key_name: pingcap
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ monitoring_instance_type }}"
    image: "{{ ami_info.results[0].ami_id }}"
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 50
        delete_on_termination: false
    instance_tags:
      Name: mon-by-{{ creator }}
      ManagedBy: "{{ managed_by }}"
      Creator: "{{ creator }}"
      Type: monitoring
    count_tag:
      Type: monitoring
      ManagedBy: "{{ managed_by }}"
    exact_count: "{{ monitoring_count }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes
